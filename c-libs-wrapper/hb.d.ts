// TypeScript bindings for emscripten-generated code.  Automatically generated at compile time.
declare namespace RuntimeExports {
    /** @param {string=} sig */
    function addFunction(func: any, sig?: string | undefined): any;
    let wasmMemory: any;
    let wasmExports: any;
    function stackAlloc(sz: any): any;
    function stackRestore(val: any): any;
    function stackSave(): any;
}
interface WasmModule {
  _hb_blob_create(_0: number, _1: number, _2: number, _3: number, _4: number): number;
  _hb_blob_create_or_fail(_0: number, _1: number, _2: number, _3: number, _4: number): number;
  _hb_blob_destroy(_0: number): void;
  _hb_blob_get_length(_0: number): number;
  _hb_blob_get_data(_0: number, _1: number): number;
  _hb_buffer_serialize_glyphs(_0: number, _1: number, _2: number, _3: number, _4: number, _5: number, _6: number, _7: number, _8: number): number;
  _hb_buffer_create(): number;
  _hb_buffer_destroy(_0: number): void;
  _hb_buffer_get_content_type(_0: number): number;
  _hb_buffer_set_direction(_0: number, _1: number): void;
  _hb_buffer_set_script(_0: number, _1: number): void;
  _hb_buffer_set_language(_0: number, _1: number): void;
  _hb_buffer_set_flags(_0: number, _1: number): void;
  _hb_buffer_set_cluster_level(_0: number, _1: number): void;
  _hb_buffer_get_length(_0: number): number;
  _hb_buffer_get_glyph_infos(_0: number, _1: number): number;
  _hb_buffer_get_glyph_positions(_0: number, _1: number): number;
  _hb_glyph_info_get_glyph_flags(_0: number): number;
  _hb_buffer_guess_segment_properties(_0: number): void;
  _hb_buffer_add_utf8(_0: number, _1: number, _2: number, _3: number, _4: number): void;
  _hb_buffer_add_utf16(_0: number, _1: number, _2: number, _3: number, _4: number): void;
  _hb_buffer_set_message_func(_0: number, _1: number, _2: number, _3: number): void;
  _hb_language_from_string(_0: number, _1: number): number;
  _hb_script_from_string(_0: number, _1: number): number;
  _hb_version(_0: number, _1: number, _2: number): void;
  _hb_version_string(): number;
  _hb_feature_from_string(_0: number, _1: number, _2: number): number;
  _malloc(_0: number): number;
  _free(_0: number): void;
  _hb_draw_funcs_set_move_to_func(_0: number, _1: number, _2: number, _3: number): void;
  _hb_draw_funcs_set_line_to_func(_0: number, _1: number, _2: number, _3: number): void;
  _hb_draw_funcs_set_quadratic_to_func(_0: number, _1: number, _2: number, _3: number): void;
  _hb_draw_funcs_set_cubic_to_func(_0: number, _1: number, _2: number, _3: number): void;
  _hb_draw_funcs_set_close_path_func(_0: number, _1: number, _2: number, _3: number): void;
  _hb_draw_funcs_create(): number;
  _hb_face_count(_0: number): number;
  _hb_face_create(_0: number, _1: number): number;
  _hb_face_create_or_fail(_0: number, _1: number): number;
  _hb_face_destroy(_0: number): void;
  _hb_face_reference_blob(_0: number): number;
  _hb_face_get_upem(_0: number): number;
  _hb_face_collect_unicodes(_0: number, _1: number): void;
  _hb_font_draw_glyph(_0: number, _1: number, _2: number, _3: number): void;
  _hb_font_glyph_to_string(_0: number, _1: number, _2: number, _3: number): void;
  _hb_font_create(_0: number): number;
  _hb_font_destroy(_0: number): void;
  _hb_font_set_scale(_0: number, _1: number, _2: number): void;
  _hb_font_set_variations(_0: number, _1: number, _2: number): void;
  _hb_ot_var_named_instance_get_design_coords(_0: number, _1: number, _2: number, _3: number): number;
  _hb_ot_layout_table_get_feature_tags(_0: number, _1: number, _2: number, _3: number, _4: number): number;
  _hb_ot_layout_collect_features(_0: number, _1: number, _2: number, _3: number, _4: number, _5: number): void;
  _hb_ot_layout_feature_get_name_ids(_0: number, _1: number, _2: number, _3: number, _4: number, _5: number, _6: number, _7: number): number;
  _hb_ot_name_list_names(_0: number, _1: number): number;
  _hb_ot_name_get_utf8(_0: number, _1: number, _2: number, _3: number, _4: number): number;
  _hb_set_create(): number;
  _hb_set_destroy(_0: number): void;
  _hb_ot_var_get_axis_count(_0: number): number;
  _hb_ot_var_get_axis_infos(_0: number, _1: number, _2: number, _3: number): number;
  _hb_ot_var_get_named_instance_count(_0: number): number;
  _hb_ot_var_named_instance_get_subfamily_name_id(_0: number, _1: number): number;
  _hb_ot_var_named_instance_get_postscript_name_id(_0: number, _1: number): number;
  _hb_set_reference(_0: number): number;
  _hb_set_copy(_0: number): number;
  _hb_set_clear(_0: number): void;
  _hb_set_add(_0: number, _1: number): void;
  _hb_set_add_range(_0: number, _1: number, _2: number): void;
  _hb_set_del(_0: number, _1: number): void;
  _hb_set_del_range(_0: number, _1: number, _2: number): void;
  _hb_set_set(_0: number, _1: number): void;
  _hb_set_union(_0: number, _1: number): void;
  _hb_set_intersect(_0: number, _1: number): void;
  _hb_set_subtract(_0: number, _1: number): void;
  _hb_set_invert(_0: number): void;
  _hb_set_get_population(_0: number): number;
  _hb_set_next(_0: number, _1: number): number;
  _hb_set_next_many(_0: number, _1: number, _2: number, _3: number): number;
  _hb_shape(_0: number, _1: number, _2: number, _3: number): void;
  _hb_style_get_value(_0: number, _1: number): number;
  _hb_subset_input_create_or_fail(): number;
  _hb_subset_input_destroy(_0: number): void;
  _hb_subset_input_reference(_0: number): number;
  _hb_subset_input_unicode_set(_0: number): number;
  _hb_subset_input_glyph_set(_0: number): number;
  _hb_subset_input_set(_0: number, _1: number): number;
  _hb_subset_input_get_flags(_0: number): number;
  _hb_subset_input_set_flags(_0: number, _1: number): void;
  _hb_subset_input_set_user_data(_0: number, _1: number, _2: number, _3: number, _4: number): number;
  _hb_subset_input_get_user_data(_0: number, _1: number): number;
  _hb_subset_input_keep_everything(_0: number): void;
  _hb_subset_input_pin_all_axes_to_default(_0: number, _1: number): number;
  _hb_subset_input_pin_axis_to_default(_0: number, _1: number, _2: number): number;
  _hb_subset_input_pin_axis_location(_0: number, _1: number, _2: number, _3: number): number;
  _hb_subset_input_set_axis_range(_0: number, _1: number, _2: number, _3: number, _4: number, _5: number): number;
  _hb_subset_preprocess(_0: number): number;
  _hb_subset_or_fail(_0: number, _1: number): number;
  _blake3_hash_data(_0: number, _1: number, _2: number, _3: number): void;
}

export type MainModule = WasmModule & typeof RuntimeExports;
export default function MainModuleFactory (options?: unknown): Promise<MainModule>;
